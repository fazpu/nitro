fs = require 'fs'

camel_case = (s) => s.replace /-(\w)/g, (_, w) -> w.toUpperCase()

rgb_to_hex = (bs) ->
  '#' + bs
    .map (b) ->
      h = b.toString 16
      if h.length is 1 then '0' + h else h
    .join ''

to_rule = (line) =>
  [l, r] = line.split /\s*:\s*/
  r = "'#{r}'" unless /^\d+$/.test r
  "#{camel_case l}: #{r}"

to_style = (css) =>
  lines = css
    # rgb(x y z) -> #aabbcc
    .replace /\brgb\((\d+)\s+(\d+)\s+(\d+)\)/g, (_, r, g, b) ->
      rgb_to_hex [r, g, b].map (x) -> parseInt x
    # 16rem; /* 256px */ -> 256;
    .replace /\b[\d\.]+rem;\s+\/\*\s+(\d+)px\s+\*\//g, '$1;'
    # 16px -> 16
    .replace /\b(\d+)px\b/g, '$1'
    .split /;/g
    .map (x) -> x.trim()
    .filter (x) -> if x then yes else no
    .map to_rule

  "{ #{lines.join ', '} }"

capture = (cases, line, i) ->
  return unless line # empty
  return if 0 is line.indexOf '#' # comment
  throw "--tw-* vars not implemented #{i}: '#{line}'" if -1 < line.indexOf '--tw-'
  [input, output] = line.split /\t/
  throw "bad line #{i}: '#{line}'" unless output
  cases.push [input, to_style output]

main = () ->
  cases = []
  fs
    .readFileSync 'samples.txt', 'utf8'
    .split /\n/g
    .forEach (line, i) -> capture cases, line, i

  tests = cases.map (c) ->
    [input, output] = c
    "t('#{input}', #{output})"

  prelude = '''
  //
  // DO NOT EDIT THIS FILE DIRECTLY!
  // Generated by tools/tailwind
  //

  import React from 'react'
  import { stylize } from './style'

  type Case = [string, React.CSSProperties]
  const cases: Case[] = []
  const t = (i: string, e: React.CSSProperties) => cases.push([i, e])
  const run = () => {
    const suites: { [key: string]: Case[] } = {}
    for (const c of cases) {
      const 
        i = c[0],
        k = i.indexOf('-'),
        p = k >= 0 ? i.substring(0, k) : i,
        suite = suites[p] ?? (suites[p] = [])
      suite.push(c)
    }
    for (const p in suites) {
      it(p, () => {
        for (const [input, expected] of suites[p]) {
          const actual: React.CSSProperties = {}
          stylize(actual, input)
          expect(actual).toStrictEqual(expected)
        }
      })
    }
  }

  '''
  run = '''

  run()
  '''

  ts = [prelude, ...tests, run].join '\n'
  fs.writeFileSync '../../web/src/style.test.ts', ts, 'utf8'


main()
