fs = require 'fs'

camel_case = (s) -> s.replace /-(\w)/g, (_, w) -> w.toUpperCase()

rgb_to_hex = (bs) ->
  hs = bs.map (b) ->
    h = b.toString 16
    if h.length is 1 then '0' + h else h
  if hs.every (h) -> h[0] is h[1]
    hs = hs.map (h) -> h[0]
  '#' + hs.join ''

to_rule = (line) ->
  [l, r] = line.split /\s*:\s*/
  r = r.replace /^(\d+)px$/g, '$1'
  r = "'#{r}'" unless /^[-]?(\d+\.\d+|\d+)$/.test r
  "#{camel_case l}: #{r}"

rem_to_px = (s) -> (16 * parseFloat(s)).toFixed 0

to_style = (css) ->
  lines = css
    # rgb(x y z) -> #aabbcc
    .replace /\brgb\((\d+)\s+(\d+)\s+(\d+)\)/g, (_, r, g, b) ->
      rgb_to_hex [r, g, b].map (x) -> parseInt x
    # /* */
    .replace /\/\*.+?\*\//g, ''
    # (1rem) -> (16px)
    .replace /\(([\d\.]+)rem\)/g, (_, f) -> "(#{rem_to_px f}px)"
    # 1rem -> 16
    .replace /\b([\d\.]+)rem\b/g, (_, f) -> rem_to_px f
    .split /;/g
    .map (x) -> x.trim()
    .filter (x) -> if x then yes else no
    .map to_rule

  "{ #{lines.join ', '} }"

capture = (cases, line, i) ->
  return unless line # empty
  return if 0 is line.indexOf '#' # comment
  throw "--tw-* vars not implemented #{i}: '#{line}'" if -1 < line.indexOf '--tw-'
  [input, output] = line.split /\t/
  throw "bad line #{i}: '#{line}'" unless output
  cases.push [input, to_style output]

main = () ->
  cases = []
  fs
    .readFileSync 'samples.txt', 'utf8'
    .split /\n/g
    .forEach (line, i) -> capture cases, line, i

  tests = cases.map (c) ->
    [input, output] = c
    "  expect(stylize({}, '#{input}')).toStrictEqual(#{output})"

  begin = '''
  //
  // DO NOT EDIT THIS FILE DIRECTLY!
  // Generated by tools/tailwind
  //

  import React from 'react'
  import { stylize } from './style'

  it('style should match tailwind', () => {
  '''

  end = '''
  })
  '''

  ts = [begin, ...tests, end].join '\n'
  fs.writeFileSync '../../web/src/style.test.ts', ts, 'utf8'


main()
