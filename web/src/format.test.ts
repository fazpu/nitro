import { S, words } from "./core"
import { format, makeFormatOptions } from "./format"

const en = ['en-US']

it('should interpolate format', () => {
  expect(format(en, '', {})).toEqual('')
  expect(format(en, 'foo', {})).toEqual('foo')
  expect(format(en, 'foo {} bar', {})).toEqual('foo  bar')
  expect(format(en, 'foo {   } bar', {})).toEqual('foo  bar')
  expect(format(en, '{foo}', { foo: 'bar' })).toEqual('bar')
  expect(format(en, '\n{\nfoo\n}\n', { foo: 'bar' })).toEqual('\nbar\n')
  expect(format(en, '  { foo   }  ', { foo: 'bar' })).toEqual('  bar  ')
  expect(format(en, '{foo} {qux}', { foo: 'bar', qux: 42 })).toEqual('bar 42')
})

const opt = (s: S) => makeFormatOptions(words(s))[1]
it('should translate number format', () => {
  expect(opt('n-s')).toEqual({ notation: 'compact' })
  expect(opt('n-l')).toEqual({ notation: 'compact', compactDisplay: 'long' })
  expect(opt('c-USD')).toEqual({ style: 'currency', currency: 'USD' })
  expect(opt('c-EUR')).toEqual({ style: 'currency', currency: 'EUR' })
  expect(opt('c-l')).toEqual({ currencyDisplay: 'name' })
  expect(opt('c-m')).toEqual({ currencyDisplay: 'code' })
  expect(opt('c-s')).toEqual({ currencyDisplay: 'symbol' })
  expect(opt('c-xs')).toEqual({ currencyDisplay: 'narrowSymbol' })
  expect(opt('acc')).toEqual({ currencySign: 'accounting' })
  expect(opt('lc-fit')).toEqual({ localeMatcher: 'best fit' })
  expect(opt('lc-lookup')).toEqual({ localeMatcher: 'lookup' })
  expect(opt('sci')).toEqual({ notation: 'scientific' })
  expect(opt('eng')).toEqual({ notation: 'engineering' })
  expect(opt('nu-deva')).toEqual({ numberingSystem: 'deva' })
  expect(opt('nu-thai')).toEqual({ numberingSystem: 'thai' })
  expect(opt('ns-n0')).toEqual({ signDisplay: 'auto' })
  expect(opt('ns-pn0')).toEqual({ signDisplay: 'always' })
  expect(opt('ns-pn')).toEqual({ signDisplay: 'exceptZero' })
  expect(opt('ns-n')).toEqual({ signDisplay: 'negative' })
  expect(opt('ns-off')).toEqual({ signDisplay: 'never' })
  expect(opt('n')).toEqual({ style: 'decimal' })
  expect(opt('pc')).toEqual({ style: 'percent' })
  expect(opt('u-degree')).toEqual({ style: 'unit', unit: 'degree' })
  expect(opt('u-inch')).toEqual({ style: 'unit', unit: 'inch' })
  expect(opt('u-l')).toEqual({ unitDisplay: 'long' })
  expect(opt('u-s')).toEqual({ unitDisplay: 'short' })
  expect(opt('u-xs')).toEqual({ unitDisplay: 'narrow' })
  expect(opt('id-5')).toEqual({ minimumIntegerDigits: 5 })
  expect(opt('fd-5')).toEqual({ minimumFractionDigits: 5 })
  expect(opt('fd-5-15')).toEqual({ minimumFractionDigits: 5, maximumFractionDigits: 15 })
  expect(opt('fd--15')).toEqual({ maximumFractionDigits: 15 })
  expect(opt('sd-5')).toEqual({ minimumSignificantDigits: 5 })
  expect(opt('sd-5-15')).toEqual({ minimumSignificantDigits: 5, maximumSignificantDigits: 15 })
  expect(opt('sd--15')).toEqual({ maximumSignificantDigits: 15 })
})

it('should translate date format', () => {
  expect(opt('d')).toEqual({ dateStyle: 'full' })
  expect(opt('d-l')).toEqual({ dateStyle: 'long' })
  expect(opt('d-m')).toEqual({ dateStyle: 'medium' })
  expect(opt('d-s')).toEqual({ dateStyle: 'short' })
  expect(opt('t')).toEqual({ timeStyle: 'full' })
  expect(opt('t-l')).toEqual({ timeStyle: 'long' })
  expect(opt('t-m')).toEqual({ timeStyle: 'medium' })
  expect(opt('t-s')).toEqual({ timeStyle: 'short' })
  expect(opt('dt')).toEqual({ dateStyle: 'full', timeStyle: 'full' })
  expect(opt('dt-l')).toEqual({ dateStyle: 'long', timeStyle: 'long' })
  expect(opt('dt-m')).toEqual({ dateStyle: 'medium', timeStyle: 'medium' })
  expect(opt('dt-s')).toEqual({ dateStyle: 'short', timeStyle: 'short' })
  expect(opt('ca-hebrew')).toEqual({ calendar: 'hebrew' })
  expect(opt('dp-l')).toEqual({ dayPeriod: 'long' })
  expect(opt('dp-s')).toEqual({ dayPeriod: 'short' })
  expect(opt('dp-xs')).toEqual({ dayPeriod: 'narrow' })
  expect(opt('nu-deva')).toEqual({ numberingSystem: 'deva' })
  expect(opt('nu-thai')).toEqual({ numberingSystem: 'thai' })
  expect(opt('lc-fit')).toEqual({ localeMatcher: 'best fit' })
  expect(opt('lc-lookup')).toEqual({ localeMatcher: 'lookup' })
  expect(opt('hc-12')).toEqual({ hourCycle: 'h12' })
  expect(opt('hc-24')).toEqual({ hourCycle: 'h24' })
  expect(opt('hc-11')).toEqual({ hourCycle: 'h11' })
  expect(opt('hc-23')).toEqual({ hourCycle: 'h23' })
  expect(opt('fmt-fit')).toEqual({ formatMatcher: 'best fit' })
  expect(opt('fmt-basic')).toEqual({ formatMatcher: 'basic' })
  expect(opt('w-l')).toEqual({ weekday: 'long' })
  expect(opt('w-s')).toEqual({ weekday: 'short' })
  expect(opt('w-xs')).toEqual({ weekday: 'narrow' })
  expect(opt('e-l')).toEqual({ era: 'long' })
  expect(opt('e-s')).toEqual({ era: 'short' })
  expect(opt('e-xs')).toEqual({ era: 'narrow' })
  expect(opt('yy')).toEqual({ year: 'numeric' })
  expect(opt('yy-2')).toEqual({ year: '2-digit' })
  expect(opt('mm')).toEqual({ month: 'numeric' })
  expect(opt('mm-2')).toEqual({ month: '2-digit' })
  expect(opt('mm-l')).toEqual({ month: 'long' })
  expect(opt('mm-s')).toEqual({ month: 'short' })
  expect(opt('mm-xs')).toEqual({ month: 'narrow' })
  expect(opt('dd')).toEqual({ day: 'numeric' })
  expect(opt('dd-2')).toEqual({ day: '2-digit' })
  expect(opt('h')).toEqual({ hour: 'numeric' })
  expect(opt('h-2')).toEqual({ hour: '2-digit' })
  expect(opt('m')).toEqual({ minute: 'numeric' })
  expect(opt('m-2')).toEqual({ minute: '2-digit' })
  expect(opt('s')).toEqual({ second: 'numeric' })
  expect(opt('s-2')).toEqual({ second: '2-digit' })
  expect(opt('fs-0')).toEqual({ fractionalSecondDigits: 0 })
  expect(opt('fs-1')).toEqual({ fractionalSecondDigits: 1 })
  expect(opt('fs-2')).toEqual({ fractionalSecondDigits: 2 })
  expect(opt('fs-3')).toEqual({ fractionalSecondDigits: 3 })
  expect(opt('tz-l')).toEqual({ timeZoneName: 'long' })
  expect(opt('tz-s')).toEqual({ timeZoneName: 'short' })
  expect(opt('tz-o-l')).toEqual({ timeZoneName: 'longOffset' })
  expect(opt('tz-o-s')).toEqual({ timeZoneName: 'shortOffset' })
  expect(opt('tz-g-l')).toEqual({ timeZoneName: 'longGeneric' })
  expect(opt('tz-g-s')).toEqual({ timeZoneName: 'shortGeneric' })
})